

*/ Authors : Taha mouatassim 
*/         : Ayoub kassi
* 1)

* 2)
* Composants : Caméras, SCC, et PPprotocole
* Caméra 
*     IN : CapteurCam
*     OUT : presence, absence, arret

* SCC   
*     IN : SignalGaucheCam, SignalCentreCam, SignalDroiteCam
*     OUT : detectionTrain

* PPprotocole
*     IN : detectionTrain
*     OUT : OuvrirPorteGauche, OuvrirPorteCentre, OuvrirPorteDroite

* Connexions : 
*   -- La sortie de la caméra est connectée au SCC (pour envoyer le signal de presence/absence/arret du train)
*   -- La sortie du SCC est connectée au PPprotocole (pour envoyer le message de detection de train)

* /* Additional components */

CS = detect.SS;
SS = 'signal.Wait;
Wait = valid.CS + error.SS;

SOAPP = signal.SOAPP';
SOAPP' = tau.Err + order.SOAPP;
Err = 'error.SOAPP;

D = order.D';
D'' = 'valid.D;
D' = 'action.D'';

set L = {signal, order, valid, error};
Impl = (CS | SOAPP | D) \ L;
Spec = detect.'action.Spec;


OP = 'ouvrirPorte.OP;
SC = 'capteurSignalRec.SC;


SOAPP_S = (SC[signalGaucheCam/capteurSignalRec] | SC[signalCentreCam/capteurSignalRec] | SC[signalDroiteCam/capteurSignalRec] 
          | OP[ouvrirPorteGauche/ouvrirPorte] | OP[ouvrirPorteCentre/ouvrirPorte] | OP[ouvrirPorteDroite/ouvrirPorte])\
          {signalGaucheCam, signalCentreCam, signalDroiteCam, ouvrirPorteGauche, ouvrirPorteCentre, ouvrirPorteDroite};


Camera0 = tau.C1;
C1 = in_receiveCameraData.C2; 
C2 = out_emittSignal.Camera0;


SOAPP_S0 = tau.SOAPP_S1;
SOAPP_S1 = signalLeftCam.SOAPP_S2;
SOAPP_S2 = signalCenterCam.SOAPP_S3;
SOAPP_S3 = signalRightCam.SOAPP_S4;
SOAPP_S4 = openLeft.SOAPP_S0;
SOAPP_S5 = openCenter.SOAPP_S0;
SOAPP_S6 = openRight.SOAPP_S0;
